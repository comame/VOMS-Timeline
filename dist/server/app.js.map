{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/server/dotenv.ts","webpack:///./src/config/channels.ts","webpack:///external \"path\"","webpack:///./src/server/fetch.ts","webpack:///./src/server/app.ts","webpack:///external \"express\"","webpack:///external \"mongodb\"","webpack:///./src/server/websubExpressHandler.ts","webpack:///external \"crypto\"","webpack:///external \"fast-xml-parser\"","webpack:///external \"fs\"","webpack:///./src/server/fetchVideo.ts","webpack:///./src/API/YouTubeApiOptions/VideosAPIOptions.ts","webpack:///external \"https\"","webpack:///./src/config/apiEndpoints.ts","webpack:///./src/util/urlQueryBuilder.ts","webpack:///./src/API/YouTubeApiOptions/SearchAPIOptions.ts","webpack:///./src/server/cache.ts","webpack:///./src/util/videoTime.ts","webpack:///./src/util/DateString.ts","webpack:///./src/server/requestSubscription.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","dotenv","fromEntries","readFileSync","resolve","__dirname","encoding","split","map","line","channels","require","async","url","option","Promise","reject","req","request","res","responseText","on","chunk","TextDecoder","decode","headers","keys","Array","isArray","join","Response","statusCode","err","body","write","end","status","this","ok","json","JSON","parse","text","app","db","use","next","bodyText","toString","static","all","videoId","websubExpressHandler","videos","fetchVideo","length","cacheResponse","lastUpdated","lastFetch","getCached","send","kind","items","Date","toISOString","now","console","log","requestSubscription","videoIds","searchVideos","MongoClient","connect","useUnifiedTopology","client","listen","queryObj","originalUrl","it","logRequest","subscribeObject","result","rawBody","reason","query","entries","replace","method","id","includes","sendStatus","verifyToken","WEBSUB_VERIFY_TOKEN","challenge","validate","error","hmacKey","WEBSUB_HUB_SECRET","hmacDigest","createHmac","update","digest","requestedHmacDigest","header","slice","updatedVideoId","feed","entry","options","part","GOOGLE_API_KEY","requestUrl","buildUrlQuery","fetch","isVideoAPIResponse","requestUrls","channelId","maxResults","order","type","search","responses","then","every","isSearchAPIResponse","_videoIds","push","arg","youtube","activities","self","encodeURIComponent","filter","metadataCollection","collection","metaUpdate","getTime","updateOne","upsert","videosCollection","video","_id","time","getVideoTime","item","limit","cacheMetadata","findOne","find","sort","toArray","liveStreamingDetails","actualEndTime","asDate","scheduledStartTime","snippet","publishedAt","dateString","requestPromises","obj"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import fs from 'fs'\nimport { resolve } from 'path'\n\nexport const dotenv: { [ key: string ]: string } = Object.fromEntries(\n    fs.readFileSync(resolve(__dirname, '../../.env'), {\n        encoding: 'utf8'\n    }).split('\\n').map(line => line.split('='))\n)\n","export const channels = {\n    '天野ピカミィ': 'UCajhBT4nMrg3DLS-bLL2RCg',\n    '緋笠トモシカ': 'UC3vzVK_N_SUVKqbX69L_X4g',\n    '磁富モノエ': 'UCaFhsCKSSS821N-EcWmPkUQ',\n}\n","module.exports = require(\"path\");","import https from 'https'\n\nexport interface HTTPHeaders {\n    [key: string]: string\n}\n\nexport interface FetchOptions {\n    method?: 'GET'|'POST'\n    headers?: HTTPHeaders,\n    body?: string\n}\n\nexport async function fetch(url: string, option?: FetchOptions): Promise<Response> {\n    return new Promise((resolve, reject) => {\n        const req = https.request(url, option ?? {}, (res) => {\n            let responseText = ''\n\n            res.on('data', (chunk: Uint8Array | string) => {\n                if (typeof chunk == 'string') {\n                    responseText += chunk\n                } else {\n                    responseText += new TextDecoder('utf-8').decode(chunk)\n                }\n            })\n\n            res.on('end', () => {\n                const headers = {} as HTTPHeaders\n                for (const key of Object.keys(res.headers)) {\n                    const value: string | string[] | undefined = res.headers[key]\n                    if (typeof value == 'undefined') continue\n                    if (Array.isArray(value)) {\n                        headers[key] = value.join(' ')\n                        continue\n                    }\n                    headers[key] = value\n                }\n\n                resolve(new Response(\n                    headers,\n                    res.statusCode!!,\n                    res.url!!,\n                    responseText\n                ))\n            })\n        })\n\n        req.on('error', (err) => {\n            reject(err)\n        })\n\n        if (option?.body) {\n            req.write(option.body)\n        }\n\n        req.end()\n    })\n}\n\nexport class Response {\n    public ok: boolean\n    public json: () => Promise<{}>\n    public text: () => Promise<string>\n\n    constructor(\n        public headers: HTTPHeaders,\n        public status: number,\n        public url: string,\n        responseText: string\n    ){\n        if (200 <= status && status < 300) {\n            this.ok = true\n        } else {\n            this.ok = false\n        }\n\n        this.json = async () => JSON.parse(responseText)\n        this.text = async () => responseText\n    }\n}\n","import path from 'path'\nimport express, { Response } from 'express'\nimport { MongoClient, Db } from 'mongodb'\nimport { websubExpressHandler } from './websubExpressHandler'\nimport { fetchVideo, searchVideos } from './fetchVideo'\nimport { cacheResponse, getCached } from './cache'\nimport { VideosResponse } from '../API/selfApiOptions/options'\nimport { requestSubscription } from './requestSubscription'\n\nconst app = express()\nlet db: Db\n\n// Parse body as string\n// @ts-ignore: res unused\napp.use((req, res, next) => {\n    let bodyText = ''\n    req.on('data', (chunk: Buffer|string) => {\n        if (typeof chunk == 'string') {\n            bodyText += chunk\n        } else {\n            bodyText += chunk.toString('utf8')\n        }\n    })\n    req.on('end', () => {\n        req.body = bodyText\n        next()\n    })\n})\n\napp.get('**', express.static(path.resolve(__dirname, '../front')))\napp.all('/sub/hook', async (req, res) => {\n    const videoId = await websubExpressHandler(req, res)\n    if (!videoId) return\n    const videos = await fetchVideo([ videoId ])\n    if (videos?.length == 0 || typeof videos == 'undefined') return\n\n    await cacheResponse(db, videos)\n})\n\n// @ts-ignore: req unused\napp.get('/api/videos', async (req, res: Response<VideosResponse>) => {\n    const { videos, lastUpdated, lastFetch } = await getCached(db)\n    res.send({\n        kind: 'voms-timeline.comame.xyz#videosResponse',\n        items: videos,\n        lastUpdated: new Date(lastUpdated).toISOString()\n    })\n\n    if (Date.now() - 24 * 60 * 60 * 1000 / 5 >= lastFetch) {\n        console.log('RE-SUBSCRIPTION')\n        if (!await requestSubscription()) {\n            console.log('SOMETHING WENT WRONG IN SUBSCRIPTION')\n        }\n\n        console.log('SEARCH VIDEOS')\n        const videoIds = await searchVideos()\n        if (videoIds.length == 0) {\n            return\n        }\n        const videos = await fetchVideo(videoIds)\n        if (videos?.length == 0 || typeof videos == 'undefined') return\n        await cacheResponse(db, videos, Date.now())\n    }\n})\n\nMongoClient.connect('mongodb://mongo:27017', { useUnifiedTopology: true }, (err, client) => {\n    if (err) throw err\n    db = client.db('voms-timeline')\n\n    app.listen(80, () => {\n        console.log('LISTEN')\n    })\n})\n","module.exports = require(\"express\");","module.exports = require(\"mongodb\");","import { Video } from '../API/YouTubeApiOptions/VideosAPIOptions'\nimport crypto from 'crypto'\nimport { parse as parseXml, validate as validateXml } from 'fast-xml-parser'\nimport { Request, Response } from 'express'\nimport { dotenv } from './dotenv'\nimport { channels } from '../config/channels'\n\nexport async function websubExpressHandler(req: Request, res: Response): Promise<Video['id']|undefined> {\n    const queryObj = Object.fromEntries(req.originalUrl.split('?')[1]?.split('&').map(it => it.split('=')) ?? [])\n\n    const logRequest = async ( { queryObj, subscribeObject, result, rawBody = '', reason = '' }: {\n        queryObj?: object,\n        subscribeObject?: object,\n        result: number,\n        rawBody?: string,\n        reason?: string\n    }) => {\n        console.log({\n            url: req.originalUrl,\n            query: Object.fromEntries(Object.entries(queryObj ?? {}).map(it => {\n                return [ (it[0] as string).replace(/\\./g, '_'), it[1] ]\n            })),\n            method: req.method,\n            body: subscribeObject,\n            headers: req.headers,\n            result,\n            rawBody,\n            reason\n        })\n    }\n\n    if (queryObj['hub.mode'] == 'subscribe') {\n        const acceptChannelIds = Object.entries(channels).map(it => it[1])\n        const acceptTopics = acceptChannelIds.map(id =>\n            ('https://www.youtube.com/xml/feeds/videos.xml?channel_id=' + id)\n                .replace(/\\?/g, '%3F')\n                .replace(/\\=/g, '%3D')\n        )\n\n        if (!acceptTopics.includes(queryObj['hub.topic'])) {\n            res.sendStatus(404)\n            await logRequest({ queryObj, result: 404, reason: 'invalid_hub.topic' })\n            return\n        }\n\n        const verifyToken = dotenv.WEBSUB_VERIFY_TOKEN\n        if (queryObj['verify_token'] != verifyToken) {\n            res.sendStatus(404)\n            await logRequest({ queryObj, result: 404, reason: 'invalid_verify_token' })\n            return\n        }\n\n        const challenge = queryObj['hub.challenge']\n        res.send(challenge)\n        await logRequest({ queryObj, result: 200 })\n        return\n    } else if (queryObj['hub.mode'] == 'unsubscribe') {\n        res.sendStatus(404)\n        await logRequest({ queryObj, result: 404, reason: 'unsubscribe_forbidden' })\n        return\n    } else if (queryObj['hub.mode'] == 'denied') {\n        res.send()\n        await logRequest({ queryObj, result: 200 })\n        return\n    }\n\n    if (validateXml(req.body) !== true) {\n        const error = validateXml(req.body)\n        console.error('VALIDATE ERROR', error)\n        res.status(500).send('error')\n        await logRequest({ result: 500, rawBody: req.body, reason: 'invalid_xml' })\n        return\n    }\n\n    const hmacKey = dotenv.WEBSUB_HUB_SECRET\n    const hmacDigest = crypto.createHmac('sha1', hmacKey).update(req.body).digest('hex')\n    const requestedHmacDigest = req.header('x-hub-signature')?.slice('sha1='.length)\n\n    if (hmacDigest != requestedHmacDigest) {\n        console.error('Invalid digest request', 'wants: ' + hmacDigest, 'got: ' + requestedHmacDigest)\n        res.send('ok')\n        await logRequest({ result: 200, rawBody: req.body, reason: 'invalid_digest' })\n        return\n    }\n\n    const verifyToken = dotenv.WEBSUB_VERIFY_TOKEN\n    if (queryObj['verify_token'] != verifyToken) {\n        res.send('ok')\n        await logRequest({ result: 200, rawBody: req.body, reason: 'invalid_verify_token'})\n    }\n\n    res.send('ok')\n\n    const subscribeObject = parseXml(req.body)\n    const updatedVideoId = subscribeObject.feed?.entry?.['yt:videoId'] as string | undefined\n\n    await logRequest({ subscribeObject, result: 200, rawBody: req.body })\n\n    return updatedVideoId\n}\n","module.exports = require(\"crypto\");","module.exports = require(\"fast-xml-parser\");","module.exports = require(\"fs\");","import { VideoAPIOptions, Video, isVideoAPIResponse } from '../API/YouTubeApiOptions/VideosAPIOptions'\nimport { fetch } from './fetch'\nimport { youtube as endpoints } from '../config/apiEndpoints'\nimport { dotenv } from './dotenv'\nimport { buildUrlQuery } from '../util/urlQueryBuilder'\nimport { SearchAPIOptions, isSearchAPIResponse, SearchAPIResponse } from '../API/YouTubeApiOptions/SearchAPIOptions'\nimport { channels } from '../config/channels'\n\nexport async function fetchVideo(videoIds: string[]): Promise<Video[]|undefined> {\n    const options: VideoAPIOptions = {\n        part: ['id', 'snippet', 'liveStreamingDetails' ],\n        id: videoIds,\n        key: dotenv.GOOGLE_API_KEY\n    }\n    const requestUrl = buildUrlQuery(endpoints.videos, {\n        ...options,\n        part: options.part.join(','),\n        id: videoIds.join(',')\n    })\n\n    const res = await fetch(requestUrl)\n    const json = await res.json()\n\n    if (!isVideoAPIResponse(json)) {\n        throw 'ERROR'\n    }\n    return json.items\n}\n\nexport async function searchVideos(): Promise<string[]> {\n    const channelIds = Object.entries(channels).map(it => it[1])\n    const options: SearchAPIOptions[] = channelIds.map(id => ({\n        part: [ 'id', 'snippet' ],\n        channelId: id,\n        maxResults: 10,\n        order: 'date',\n        type: 'video',\n        key: dotenv.GOOGLE_API_KEY\n    }))\n    const requestUrls = options.map(option => ({\n        ...option,\n        part: option.part.join(',')\n    })).map(option => buildUrlQuery(endpoints.search, option))\n    const responses = await Promise.all(\n        requestUrls.map(url => fetch(url).then(res => res.json()))\n    )\n\n    if (!responses.every(it => isSearchAPIResponse(it))) {\n        console.log(responses)\n        return []\n    }\n\n    const videoIds: string[] = []\n    for (const res of responses as SearchAPIResponse[]) {\n        const _videoIds = res.items.map(it => it.id?.videoId!!)\n        videoIds.push(..._videoIds)\n    }\n\n    return videoIds\n}\n","import { Thumbnails } from './Thumbnails'\nimport { DateString } from '../../util/DateString';\n\nexport interface VideoAPIOptions {\n    part: Array<'id'|'snippet'|'contentDetails'|'liveStreamingDetails'|'player'|'status'>\n    id: string[]\n    maxResults?: number\n    key?: string\n}\n\nexport interface VideoAPIResponse {\n    kind: 'youtube#videoListResponse'\n    etag: string\n    nextPageToken?: string\n    prevPageToken?: string\n    pageInfo: {\n        totalResults: number\n        resultsPerPage: number\n    }\n    items: Video[]\n}\n\nexport interface Video {\n    kind: 'youtube#video'\n    etag: string\n    id: string\n    snippet?: {\n        publishedAt: DateString\n        channelId: string\n        title: string\n        description: string\n        thumbnails: Thumbnails\n        channelTitle: string\n        liveBroadcastContent?: 'live'|'none'|'upcoming'\n    }\n    contentDetails?: {\n        duration: string\n    }\n    player?: {\n        embedHtml: string\n    }\n    liveStreamingDetails?: {\n        actualStartTime?: DateString\n        actualEndTime?: DateString\n        scheduledStartTime?: DateString\n    }\n}\n\nexport function isVideoAPIResponse(arg: any): arg is VideoAPIResponse {\n    return typeof arg == 'object' && arg.kind == 'youtube#videoListResponse'\n}\n","module.exports = require(\"https\");","export const youtube = {\n    search: 'https://www.googleapis.com/youtube/v3/search',\n    activities: 'https://www.googleapis.com/youtube/v3/activities',\n    videos: 'https://www.googleapis.com/youtube/v3/videos'\n}\n\nexport const self = {\n    videos: '/api/videos'\n}\n","export interface URLQuery {\n    [ key: string ]: string|number|undefined\n}\n\nexport function buildUrlQuery(url: string, query: URLQuery) {\n    const queryString = Object.keys(query).map(key => {\n        const value = query[key]\n        if (typeof value == 'undefined') return\n        return encodeURIComponent(key) + '=' + encodeURIComponent(value)\n    }).filter(it =>\n        typeof it != 'undefined'\n    ).join('&')\n    return url + '?' + queryString\n}\n","import { Thumbnails } from './Thumbnails'\nimport { DateString } from '../../util/DateString';\n\nexport interface SearchAPIOptions {\n    part: Array<'id'|'snippet'>\n    channelId?: string\n    eventType?: 'completed'|'live'|'upcoming'\n    maxResults?: number\n    order?: 'date'|'rating'|'relevance'\n    type?: 'video'\n    key?: string\n}\n\nexport interface SearchAPIResponse {\n    kind: 'youtube#searchListResponse'\n    etag: string\n    nextPageToken: string\n    prevPageToken: string\n    pageInfo: {\n        totalResults: number\n        resultsPerPage: number\n    }\n    items: SearchResult[]\n}\n\nexport function isSearchAPIResponse(arg: any): arg is SearchAPIResponse {\n    return typeof arg == 'object' && arg.kind == 'youtube#searchListResponse'\n}\n\nexport interface SearchResult {\n    kind: 'youtube#searchResult'\n    etag: string\n    id?: {\n        kind: string\n        videoId?: string\n    }\n    snippet?: {\n        publishedAt: DateString\n        channelId: string\n        title: string\n        description: string\n        thumbnails: Thumbnails\n    }\n    channelTitle: string\n}\n","import { Db, Collection } from 'mongodb'\nimport { Video } from \"../API/YouTubeApiOptions/VideosAPIOptions\";\nimport { getVideoTime } from '../util/videoTime';\n\ninterface CacheMeta {\n    lastUpdated: number,\n    lastFetch?: number\n}\n\ninterface VideoCache {\n    _id: Video['id'],\n    time: number,\n    item: Video,\n    update: number\n}\n\nexport async function cacheResponse(db: Db, videos: Video[], lastFetch?: number) {\n    const metadataCollection: Collection<CacheMeta> = db.collection('metadata')\n\n    const metaUpdate = lastFetch ? {\n        lastUpdated: new Date().getTime(),\n        lastFetch\n    } : {\n        lastUpdated: new Date().getTime()\n    }\n\n    await metadataCollection.updateOne({}, {\n        '$set': metaUpdate\n    }, {\n        upsert: true\n    })\n\n    const videosCollection: Collection<VideoCache> = db.collection('videos')\n    await Promise.all(videos.map(video => videosCollection.updateOne({\n        _id: video.id\n    }, {\n        '$set': {\n            _id: video.id,\n            time: getVideoTime(video).getTime(),\n            item: video,\n            update: Date.now()\n        }\n    }, {\n        upsert: true\n    })))\n}\n\nexport async function getCached(db: Db, limit: number = 50): Promise<{\n    lastUpdated: number,\n    lastFetch: number,\n    videos: Video[]\n}> {\n    const metadataCollection: Collection<CacheMeta> = db.collection('metadata')\n    const videosCollection: Collection<VideoCache> = db.collection('videos')\n\n    const cacheMetadata = await metadataCollection.findOne({})\n    const videoCaches = await videosCollection.find()\n        .sort('time', -1)\n        .limit(limit)\n        .toArray()\n\n    const videos = videoCaches.map(it => it.item)\n    const lastUpdated = cacheMetadata?.lastUpdated ?? 0\n    const lastFetch = cacheMetadata?.lastFetch ?? 0\n\n    return { lastUpdated, lastFetch, videos }\n}\n","import { Video } from \"../API/YouTubeApiOptions/VideosAPIOptions\";\nimport { asDate } from \"./DateString\";\n\nexport function getVideoTime(video: Video): Date {\n    if (video.liveStreamingDetails?.actualEndTime) {\n        return asDate(video.liveStreamingDetails.actualEndTime)\n    }\n    if (video.liveStreamingDetails?.scheduledStartTime) {\n        return asDate(video.liveStreamingDetails.scheduledStartTime)\n    } else {\n        return asDate(video.snippet?.publishedAt!!)\n    }\n}\n","export type DateString = string\n\nexport function asDate(dateString: DateString): Date {\n    return new Date(dateString)\n}\n","import { dotenv } from './dotenv'\nimport { fetch } from './fetch'\nimport { channels } from '../config/channels'\n\nexport async function requestSubscription(): Promise<boolean> {\n    const bodyObjs = Object.entries(channels).map(it => it[1]).map(channelId => ({\n        'hub.callback': `https://voms-timeline.comame.xyz/sub/hook?verify_token=${dotenv.WEBSUB_VERIFY_TOKEN}`,\n        'hub.verify': 'sync',\n        'hub.mode': 'subscribe',\n        'hub.secret': dotenv.WEBSUB_HUB_SECRET,\n        'hub.topic': `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${channelId}`\n    }))\n    const bodyEncodeds = bodyObjs.map(obj => {\n        return Object.entries(obj).map(([ key, value ]) => {\n            return key + '=' + encodeURIComponent(value)\n        }).join('&')\n    })\n\n    const requestPromises = bodyEncodeds.map(body => fetch('https://pubsubhubbub.appspot.com/subscribe', {\n        method: 'POST',\n        body,\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'content-length': '' + body.length,\n            'user-agent': 'comame<dev@comame.xyz>'\n        }\n    }))\n\n    const responses = await Promise.all(requestPromises)\n    return responses.every(it => it.ok)\n}\n"],"sourceRoot":""}